(function( e ) {
	var c = {getElementPosition: function() {
		var a = e( this ).parents( ":have-scroll" );
		if( !a.length )return!1;
		var b = c.getFromTop.call( this ) - a.scrollTop(), d = c.getFromLeft.call( this ) - a.scrollLeft();
		return{elemTopBorder: b, elemBottomBorder: b + e( this ).height(), elemLeftBorder: d, elemRightBorder: d + e( this ).width(), viewport: a, viewportHeight: a.height(), viewportWidth: a.width()}
	}, getFromTop: function() {
		for( var a = 0, b = e( this ).get( 0 ); b && !e( b ).is( ":have-scroll" ); b = b.offsetParent )a += b.offsetTop;
		return Math.round( a )
	},
		getFromLeft: function() {
			for( var a = 0, b = e( this ).get( 0 ); b && !e( b ).is( ":have-scroll" ); b = b.offsetParent )a += b.offsetLeft;
			return Math.round( a )
		}, aboveTheViewport: function( a ) {
			a = "string" == typeof a ? parseInt( a, 10 ) : 0;
			var b = c.getElementPosition.call( this );
			return b ? 0 > b.elemTopBorder - a : !1
		}, partlyAboveTheViewport: function( a ) {
			a = "string" == typeof a ? parseInt( a, 10 ) : 0;
			var b = c.getElementPosition.call( this );
			return b ? 0 > b.elemTopBorder - a && 0 <= b.elemBottomBorder - a : !1
		}, belowTheViewport: function( a ) {
			a = "string" == typeof a ? parseInt( a,
				10 ) : 0;
			var b = c.getElementPosition.call( this );
			return b ? b.viewportHeight <= b.elemBottomBorder + a : !1
		}, partlyBelowTheViewport: function( a ) {
			a = "string" == typeof a ? parseInt( a, 10 ) : 0;
			var b = c.getElementPosition.call( this );
			return b ? b.viewportHeight <= b.elemBottomBorder + a && b.viewportHeight > b.elemTopBorder - a : !1
		}, leftOfViewport: function( a ) {
			a = "string" == typeof a ? parseInt( a, 10 ) : 0;
			var b = c.getElementPosition.call( this );
			return b ? 0 > b.elemLeftBorder - a : !1
		}, partlyLeftOfViewport: function( a ) {
			a = "string" == typeof a ? parseInt( a, 10 ) :
				0;
			var b = c.getElementPosition.call( this );
			return b ? 0 > b.elemLeftBorder - a && 0 <= b.elemRightBorder + a : !1
		}, rightOfViewport: function( a ) {
			a = "string" == typeof a ? parseInt( a, 10 ) : 0;
			var b = c.getElementPosition.call( this );
			return b ? b.viewportWidth <= b.elemRightBorder + a : !1
		}, partlyRightOfViewport: function( a ) {
			a = "string" == typeof a ? parseInt( a, 10 ) : 0;
			var b = c.getElementPosition.call( this );
			return b ? b.viewportWidth <= b.elemRightBorder + a && b.viewportWidth > b.elemLeftBorder - a : !1
		}, inViewport: function( a ) {
			return!c.aboveTheViewport.call( this,
				a ) && !c.belowTheViewport.call( this, a ) && !c.leftOfViewport.call( this, a ) && !c.rightOfViewport.call( this, a )
		}, getState: function( a ) {
			a = e.extend( {threshold: 0, allowPartly: !1, allowMixedStates: !1}, a );
			var b = c.aboveTheViewport.call( this, a.threshold ), d = c.belowTheViewport.call( this, a.threshold ), f = c.leftOfViewport.call( this, a.threshold ), g = c.rightOfViewport.call( this, a.threshold ), h = "";
			if( b || d || f || g ) {
				if( a.allowPartly ) {
					var l = c.partlyAboveTheViewport.call( this, a.threshold ), m = c.partlyBelowTheViewport.call( this, a.threshold ),
					    k = c.partlyLeftOfViewport.call( this, a.threshold ), n = c.partlyRightOfViewport.call( this, a.threshold );
					l && !m ? h = a.allowMixedStates && (k || n) ? k ? "partly-above partly-left" : "partly-above partly-right" : a.allowMixedStates && (f || g) ? f ? "left partly-above" : "right partly-above" : "partly-above" : m && !l ? h = a.allowMixedStates && (k || n) ? k ? "partly-below partly-left" : "partly-below partly-right" : a.allowMixedStates && (f || g) ? f ? "left partly-below" : "right partly-below" : "partly-below" : !k || l || m || n ? !n || l || m || k || (h = a.allowMixedStates && (b ||
						d) ? b ? "above partly-right" : "below partly-right" : "partly-right") : h = a.allowMixedStates && (b || d) ? b ? "above partly-left" : "below partly-left" : "partly-left"
				}
				"" == h && (h = b && !d ? a.allowMixedStates && (f || g) ? f ? "above-left" : "above-right" : "above" : d && !b ? a.allowMixedStates && (f || g) ? f ? "below-left" : "below-right" : "below" : !f || b || d || g ? !g || b || d || f ? "outside" : "right" : "left")
			} else h = "inside";
			return h
		}, haveScroll: function() {
			return this.scrollHeight > this.offsetHeight || this.scrollWidth > this.offsetWidth
		}, generateEUID: function() {
			for( var a =
				         "", b = 0; 32 > b; b++ )a += Math.floor( 16 * Math.random() ).toString( 16 );
			return a
		}};
	e.extend( e.expr[":"], {"in-viewport": function( a, b, d ) {
		return c.inViewport.call( a, d[3] )
	}, "above-the-viewport": function( a, b, d ) {
		return c.aboveTheViewport.call( a, d[3] )
	}, "below-the-viewport": function( a, b, d ) {
		return c.belowTheViewport.call( a, d[3] )
	}, "left-of-viewport": function( a, b, d ) {
		return c.leftOfViewport.call( a, d[3] )
	}, "right-of-viewport": function( a, b, d ) {
		return c.rightOfViewport.call( a, d[3] )
	}, "partly-above-the-viewport": function( a, b, d ) {
		return c.partlyAboveTheViewport.call( a, d[3] )
	}, "partly-below-the-viewport": function( a, b, d ) {
		return c.partlyBelowTheViewport.call( a, d[3] )
	}, "partly-left-of-viewport": function( a, b, d ) {
		return c.partlyLeftOfViewport.call( a, d[3] )
	}, "partly-right-of-viewport": function( a, b, d ) {
		return c.partlyRightOfViewport.call( a, d[3] )
	}, "have-scroll": function( a ) {
		return c.haveScroll.call( a )
	}} );
	e.fn.viewportTrack = function( a, b ) {
		var d = e.extend( {threshold: 0, allowPartly: !1, allowMixedStates: !1}, b );
		return"string" == typeof a && "destroy" ==
			a ? this.each( function() {
			var a = e( this ).parent( ":have-scroll" );
			"BODY" == a.get( 0 ).tagName ? e( window ).unbind( ".viewport" + e( this ).data( "euid" ) ) : a.unbind( ".viewport" + e( this ).data( "euid" ) );
			e( this ).removeData( "euid" )
		} ) : "function" != typeof a ? (e.error( "Callback function not defined" ), this) : this.each( function() {
			var b = this;
			e( this ).data( "euid", c.generateEUID.call() );
			a.apply( b, [c.getState.apply( b, [d] )] );
			var g = e( b ).parents( ":have-scroll" );
			if( !g.length )return!1;
			"BODY" == g.get( 0 ).tagName ? e( window ).bind( "scroll.viewport" +
				e( this ).data( "euid" ), function() {
				a.apply( b, [c.getState.apply( b, [d] )] )
			} ) : g.bind( "scroll.viewport" + e( this ).data( "euid" ), function() {
				a.apply( b, [c.getState.apply( b, [d] )] )
			} )
		} )
	}
})( jQuery );
