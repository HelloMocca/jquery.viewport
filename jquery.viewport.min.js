(function( c ) {
	var d = {getElementPosition: function() {
		var a = c( this ).parents( ":have-scroll" );
		if( !a.length )return!1;
		var b = "BODY" == a.get( 0 ).tagName ? c( this ).offset().top : c( this ).position().top, d = "BODY" == a.get( 0 ).tagName ? c( this ).offset().left : c( this ).position().left;
		return{elemTopBorder: b, elemBottomBorder: b + c( this ).height(), elemLeftBorder: d, elemRightBorder: d + c( this ).width(), elemMargin: [parseInt( c( this ).css( "margin-top" ), 10 ), parseInt( c( this ).css( "margin-right" ), 10 ), parseInt( c( this ).css( "margin-bottom" ), 10 ),
			parseInt( c( this ).css( "margin-left" ), 10 )], viewport: a, viewportHeight: a.height(), viewportWidth: a.width()}
	}, aboveTheViewport: function( a ) {
		a = "string" == typeof a ? parseInt( a, 10 ) : 0;
		var b = d.getElementPosition.call( this );
		return b ? 0 > b.elemTopBorder + b.elemMargin[0] - b.elemMargin[2] - a : !1
	}, partlyAboveTheViewport: function( a ) {
		a = "string" == typeof a ? parseInt( a, 10 ) : 0;
		var b = d.getElementPosition.call( this );
		return b ? 0 > b.elemTopBorder + b.elemMargin[0] - b.elemMargin[2] - a && 0 <= b.elemBottomBorder + b.elemMargin[0] + b.elemMargin[2] -
			a : !1
	}, belowTheViewport: function( a ) {
		a = "string" == typeof a ? parseInt( a, 10 ) : 0;
		var b = d.getElementPosition.call( this );
		return b ? b.viewportHeight <= b.elemTopBorder + c( this ).height() + b.elemMargin[0] - b.elemMargin[2] + a : !1
	}, partlyBelowTheViewport: function( a ) {
		a = "string" == typeof a ? parseInt( a, 10 ) : 0;
		var b = d.getElementPosition.call( this );
		return b ? b.viewportHeight <= b.elemBottomBorder + b.elemMargin[0] - b.elemMargin[2] + a && b.viewportHeight > b.elemTopBorder + b.elemMargin[0] - b.elemMargin[2] - a : !1
	}, leftOfViewport: function( a ) {
		a =
				"string" == typeof a ? parseInt( a, 10 ) : 0;
		var b = d.getElementPosition.call( this );
		return b ? 0 > b.elemLeftBorder + b.elemMargin[3] - b.elemMargin[1] - a : !1
	}, partlyLeftOfViewport: function( a ) {
		a = "string" == typeof a ? parseInt( a, 10 ) : 0;
		var b = d.getElementPosition.call( this );
		return b ? 0 > b.elemLeftBorder + b.elemMargin[3] - b.elemMargin[1] - a && 0 <= b.elemRightBorder + b.elemMargin[3] - b.elemMargin[1] + a : !1
	}, rightOfViewport: function( a ) {
		a = "string" == typeof a ? parseInt( a, 10 ) : 0;
		var b = d.getElementPosition.call( this );
		return b ? b.viewportWidth <=
			b.elemRightBorder + b.elemMargin[3] - b.elemMargin[1] + a : !1
	}, partlyRightOfViewport: function( a ) {
		a = "string" == typeof a ? parseInt( a, 10 ) : 0;
		var b = d.getElementPosition.call( this );
		return b ? b.viewportWidth <= b.elemRightBorder + b.elemMargin[3] - b.elemMargin[1] + a && b.viewportWidth > b.elemLeftBorder + b.elemMargin[3] - b.elemMargin[1] - a : !1
	}, inViewport: function( a ) {
		return!d.aboveTheViewport.call( this, a ) && !d.belowTheViewport.call( this, a ) && !d.leftOfViewport.call( this, a ) && !d.rightOfViewport.call( this, a )
	}, getState: function( a ) {
		a =
			c.extend( {threshold: 0, allowPartly: !1, allowMixedStates: !1}, a );
		var b = d.aboveTheViewport.call( this, a.threshold ), e = d.belowTheViewport.call( this, a.threshold ), f = d.leftOfViewport.call( this, a.threshold ), g = d.rightOfViewport.call( this, a.threshold ), h = "";
		if( b || e || f || g ) {
			if( a.allowPartly ) {
				var l = d.partlyAboveTheViewport.call( this, a.threshold ), m = d.partlyBelowTheViewport.call( this, a.threshold ), k = d.partlyLeftOfViewport.call( this, a.threshold ), n = d.partlyRightOfViewport.call( this, a.threshold );
				l && !m ? h = a.allowMixedStates &&
					(k || n) ? k ? "partly-above partly-left" : "partly-above partly-right" : a.allowMixedStates && (f || g) ? f ? "left partly-above" : "right partly-above" : "partly-above" : m && !l ? h = a.allowMixedStates && (k || n) ? k ? "partly-below partly-left" : "partly-below partly-right" : a.allowMixedStates && (f || g) ? f ? "left partly-below" : "right partly-below" : "partly-below" : !k || l || m || n ? !n || l || m || k || (h = a.allowMixedStates && (b || e) ? b ? "above partly-right" : "below partly-right" : "partly-right") : h = a.allowMixedStates && (b || e) ? b ? "above partly-left" : "below partly-left" :
					"partly-left"
			}
			"" == h && (h = b && !e ? a.allowMixedStates && (f || g) ? f ? "above-left" : "above-right" : "above" : e && !b ? a.allowMixedStates && (f || g) ? f ? "below-left" : "below-right" : "below" : !f || b || e || g ? !g || b || e || f ? "outside" : "right" : "left")
		} else h = "inside";
		return h
	}, haveScroll: function() {
		return this.scrollHeight > c( this ).height() || this.scrollWidth > c( this ).width()
	}, generateEUID: function() {
		for( var a = "", b = 0; 32 > b; b++ )a += Math.floor( 16 * Math.random() ).toString( 16 );
		return a
	}};
	c.extend( c.expr[":"], {"in-viewport": function( a, b, c ) {
		return d.inViewport.call( a,
			c[3] )
	}, "above-the-viewport": function( a, b, c ) {
		return d.aboveTheViewport.call( a, c[3] )
	}, "below-the-viewport": function( a, b, c ) {
		return d.belowTheViewport.call( a, c[3] )
	}, "left-of-viewport": function( a, b, c ) {
		return d.leftOfViewport.call( a, c[3] )
	}, "right-of-viewport": function( a, b, c ) {
		return d.rightOfViewport.call( a, c[3] )
	}, "partly-above-the-viewport": function( a, b, c ) {
		return d.partlyAboveTheViewport.call( a, c[3] )
	}, "partly-below-the-viewport": function( a, b, c ) {
		return d.partlyBelowTheViewport.call( a, c[3] )
	}, "partly-left-of-viewport": function( a, b, c ) {
		return d.partlyLeftOfViewport.call( a, c[3] )
	}, "partly-right-of-viewport": function( a, b, c ) {
		return d.partlyRightOfViewport.call( a, c[3] )
	}, "have-scroll": function( a ) {
		return d.haveScroll.call( a )
	}} );
	c.fn.viewportTrace = function( a, b ) {
		var e = c.extend( {threshold: 0, allowPartly: !1, allowMixedStates: !1}, b );
		return"string" == typeof a && "destroy" == a ? this.each( function() {
			var a = c( this ).parent( ":have-scroll" );
			"BODY" == a.get( 0 ).tagName ? c( window ).unbind( ".viewport" + c( this ).data( "euid" ) ) : a.unbind( ".viewport" + c( this ).data( "euid" ) );
			c( this ).removeData( "euid" )
		} ) : "function" != typeof a ? (c.error( "Callback function not defined" ), this) : this.each( function() {
			var b = this;
			c( this ).data( "euid", d.generateEUID.call() );
			a.apply( b, [d.getState.apply( b, [e] )] );
			var g = c( b ).parent( ":have-scroll" );
			if( !g.length )return!1;
			"BODY" == g.get( 0 ).tagName ? c( window ).bind( "scroll.viewport" + c( this ).data( "euid" ), function() {
				a.apply( b, [d.getState.apply( b, [e] )] )
			} ) : g.bind( "scroll.viewport" + c( this ).data( "euid" ), function() {
				a.apply( b, [d.getState.apply( b, [e] )] )
			} )
		} )
	}
})( jQuery );
